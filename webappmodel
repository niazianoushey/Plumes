from flask import Flask, request, jsonify
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

app = Flask(__name__)

# Load the pre-trained model
model = load_model('CNNModel.h5')

# Define image dimensions
image_height = 128
image_width = 128

# Define classes for mapping predictions
classes = ['Mild', 'Moderate', 'No_DR', 'Proliferate_DR', 'Severe']

# Define a route for model prediction
@app.route('/predict', methods=['POST'])
def predict():
    # Ensure that a file is uploaded
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    
    file = request.files['file']
    
    # Check if the file is empty
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    
    # Check if the file is valid
    if file and allowed_file(file.filename):
        # Load and preprocess the image
        img = image.load_img(file, target_size=(image_height, image_width))
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0) / 255.0
        
        # Perform prediction
        prediction = model.predict(img_array)
        predicted_class = classes[np.argmax(prediction)]
        
        return jsonify({'prediction': predicted_class})
    
    return jsonify({'error': 'Invalid file type'})


# Helper function to check allowed file types
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in {'png', 'jpg', 'jpeg'}

# Run the Flask application
if __name__ == '__main__':
    app.run(debug=True)
